{"ast":null,"code":"var _jsxFileName = \"D:\\\\React_Projects\\\\groceries-ordering-app\\\\src\\\\components\\\\Cart\\\\Cart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react';\nimport Modal from '../UI/Modal';\nimport CartItem from './CartItem';\nimport classes from './Cart.module.css';\nimport CartContext from '../../store/cart-context';\nimport Checkout from './Checkout';\nimport useHttp from '../../hooks/use-http';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Cart = props => {\n  _s();\n\n  const [isCheckout, setIsCheckout] = useState(false);\n  const [didSubmit, setDidSubmit] = useState(false);\n  const cartCtx = useContext(CartContext);\n  const {\n    isLoading: orderIsLoading,\n    sendRequest: orderGroceriesRequest,\n    response: orderResponse\n  } = useHttp();\n  const totalAmount = `$${cartCtx.totalAmount.toFixed(2)}`;\n  const hasItems = cartCtx.items.length > 0;\n\n  const cartItemRemoveHandler = id => {\n    cartCtx.removeItem(id);\n  };\n\n  const cartItemAddHandler = item => {\n    cartCtx.addItem(item);\n  };\n\n  const orderHandler = () => {\n    setIsCheckout(true);\n  };\n\n  const submitOrderHandlers = async userData => {\n    setIsSubmitting(true);\n    await fetch('https://react-http-6b4a6.firebaseio.com/orders.json', {\n      method: 'POST',\n      body: JSON.stringify({\n        user: userData,\n        orderedItems: cartCtx.items\n      })\n    });\n    setIsSubmitting(false);\n    setDidSubmit(true);\n    cartCtx.clearCart();\n  }; //Request to backend for fetching groceries\n\n\n  const submitOrderHandler = async userData => {\n    setIsSubmitting(true);\n    orderGroceriesRequest({\n      url: \"http://localhost:8080/api/protected/orderGroceries\",\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: {\n        userDetails: userData,\n        orderedItems: cartCtx.items\n      },\n      errorMsg: \"Request failed!\"\n    });\n  };\n\n  const cartItems = /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: classes['cart-items'],\n    children: cartCtx.items.map(item => /*#__PURE__*/_jsxDEV(CartItem, {\n      name: item.name,\n      amount: item.amount,\n      price: item.price,\n      onRemove: cartItemRemoveHandler.bind(null, item.id),\n      onAdd: cartItemAddHandler.bind(null, item)\n    }, item.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n\n  const modalActions = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.actions,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: classes['button--alt'],\n      onClick: props.onClose,\n      children: \"Close\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), hasItems && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: classes.button,\n      onClick: orderHandler,\n      children: \"Order\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n\n  const cartModalContent = /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [cartItems, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.total,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Total Amount\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: totalAmount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), isCheckout && /*#__PURE__*/_jsxDEV(Checkout, {\n      onConfirm: submitOrderHandler,\n      onCancel: props.onClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this), !isCheckout && modalActions]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n\n  const isSubmittingModalContent = /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Confirming your order...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 36\n  }, this);\n\n  const didSubmitModalContent = /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Your order has been placed successfully!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.actions,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: classes.button,\n        onClick: props.onClose,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n\n  if (orderResponse.responseCode === 0) {\n    setIsSubmitting(false);\n    setDidSubmit(true);\n    cartCtx.clearCart();\n  }\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    onClose: props.onClose,\n    children: [!isSubmitting && !didSubmit && cartModalContent, isSubmitting && isSubmittingModalContent, !isSubmitting && didSubmit && didSubmitModalContent]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Cart, \"5t+0oP2wxRiv3BkCZqwSfpHwQb4=\", false, function () {\n  return [useHttp];\n});\n\n_c = Cart;\nexport default Cart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cart\");","map":{"version":3,"sources":["D:/React_Projects/groceries-ordering-app/src/components/Cart/Cart.js"],"names":["React","useContext","useState","Modal","CartItem","classes","CartContext","Checkout","useHttp","Cart","props","isCheckout","setIsCheckout","didSubmit","setDidSubmit","cartCtx","isLoading","orderIsLoading","sendRequest","orderGroceriesRequest","response","orderResponse","totalAmount","toFixed","hasItems","items","length","cartItemRemoveHandler","id","removeItem","cartItemAddHandler","item","addItem","orderHandler","submitOrderHandlers","userData","setIsSubmitting","fetch","method","body","JSON","stringify","user","orderedItems","clearCart","submitOrderHandler","url","headers","userDetails","errorMsg","cartItems","map","name","amount","price","bind","modalActions","actions","onClose","button","cartModalContent","total","isSubmittingModalContent","didSubmitModalContent","responseCode","isSubmitting"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react';\r\n\r\nimport Modal from '../UI/Modal';\r\nimport CartItem from './CartItem';\r\nimport classes from './Cart.module.css';\r\nimport CartContext from '../../store/cart-context';\r\nimport Checkout from './Checkout';\r\nimport useHttp from '../../hooks/use-http';\r\n\r\nconst Cart = (props) => {\r\n  const [isCheckout, setIsCheckout] = useState(false);\r\n  const [didSubmit, setDidSubmit] = useState(false);\r\n  const cartCtx = useContext(CartContext);\r\n\r\n  const {\r\n    isLoading: orderIsLoading,\r\n    sendRequest: orderGroceriesRequest,\r\n    response: orderResponse,\r\n  } = useHttp();\r\n\r\n  const totalAmount = `$${cartCtx.totalAmount.toFixed(2)}`;\r\n  const hasItems = cartCtx.items.length > 0;\r\n\r\n  const cartItemRemoveHandler = (id) => {\r\n    cartCtx.removeItem(id);\r\n  };\r\n\r\n  const cartItemAddHandler = (item) => {\r\n    cartCtx.addItem(item);\r\n  };\r\n\r\n  const orderHandler = () => {\r\n    setIsCheckout(true);\r\n  };\r\n\r\n  const submitOrderHandlers = async (userData) => {\r\n    setIsSubmitting(true);\r\n    await fetch('https://react-http-6b4a6.firebaseio.com/orders.json', {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        user: userData,\r\n        orderedItems: cartCtx.items,\r\n      }),\r\n    });\r\n    setIsSubmitting(false);\r\n    setDidSubmit(true);\r\n    cartCtx.clearCart();\r\n  };\r\n\r\n  //Request to backend for fetching groceries\r\n  const submitOrderHandler = async (userData) => {\r\n    setIsSubmitting(true);\r\n    orderGroceriesRequest({\r\n      url: \"http://localhost:8080/api/protected/orderGroceries\",\r\n      method: \"post\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: { userDetails: userData, orderedItems: cartCtx.items },\r\n      errorMsg: \"Request failed!\",\r\n    });\r\n  };\r\n\r\n  const cartItems = (\r\n    <ul className={classes['cart-items']}>\r\n      {cartCtx.items.map((item) => (\r\n        <CartItem\r\n          key={item.id}\r\n          name={item.name}\r\n          amount={item.amount}\r\n          price={item.price}\r\n          onRemove={cartItemRemoveHandler.bind(null, item.id)}\r\n          onAdd={cartItemAddHandler.bind(null, item)}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n\r\n  const modalActions = (\r\n    <div className={classes.actions}>\r\n      <button className={classes['button--alt']} onClick={props.onClose}>\r\n        Close\r\n      </button>\r\n      {hasItems && (\r\n        <button className={classes.button} onClick={orderHandler}>\r\n          Order\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  const cartModalContent = (\r\n    <React.Fragment>\r\n      {cartItems}\r\n      <div className={classes.total}>\r\n        <span>Total Amount</span>\r\n        <span>{totalAmount}</span>\r\n      </div>\r\n      {isCheckout && (\r\n        <Checkout onConfirm={submitOrderHandler} onCancel={props.onClose} />\r\n      )}\r\n      {!isCheckout && modalActions}\r\n    </React.Fragment>\r\n  );\r\n\r\n  const isSubmittingModalContent = <p>Confirming your order...</p>;\r\n\r\n  const didSubmitModalContent = (\r\n    <React.Fragment>\r\n      <p>Your order has been placed successfully!</p>\r\n      <div className={classes.actions}>\r\n      <button className={classes.button} onClick={props.onClose}>\r\n        Close\r\n      </button>\r\n    </div>\r\n    </React.Fragment>\r\n  );\r\n\r\n  if(orderResponse.responseCode === 0){\r\n    setIsSubmitting(false);\r\n    setDidSubmit(true);\r\n    cartCtx.clearCart();\r\n  }\r\n\r\n  return (\r\n    <Modal onClose={props.onClose}>\r\n      {!isSubmitting && !didSubmit && cartModalContent}\r\n      {isSubmitting && isSubmittingModalContent}\r\n      {!isSubmitting && didSubmit && didSubmitModalContent}\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default Cart;"]},"metadata":{},"sourceType":"module"}